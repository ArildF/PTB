// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.0.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.431
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Rogue.Ptb.UI.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Subtasks")]
    public partial class SubtasksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SubTasks.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Subtasks", "In order to better organize my tasks\r\nAs a person\r\nI want to have subtasks of my " +
                    "tasks", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtasks")]
        public virtual void Subtasks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtasks", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table1.AddRow(new string[] {
                        "Yo"});
#line 7
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table1);
#line 10
 testRunner.When("I select task \'Yo\'");
#line 11
 testRunner.And("click new subtask");
#line 12
 testRunner.Then("a new task should be created");
#line 13
 testRunner.And("the new task should be in edit mode");
#line 14
 testRunner.And("the new task should be in position #2");
#line 15
 testRunner.And("the new task should be indented 1 place");
#line 16
 testRunner.And("the new task should be selected");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtasks of subtasks")]
        public virtual void SubtasksOfSubtasks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtasks of subtasks", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table2.AddRow(new string[] {
                        "Yo"});
#line 19
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table2);
#line 22
 testRunner.When("I select task \'Yo\'");
#line 23
 testRunner.And("click new subtask");
#line 24
 testRunner.And("click new subtask");
#line 25
 testRunner.Then("a new task should be created");
#line 26
 testRunner.And("the new task should be in edit mode");
#line 27
 testRunner.And("the new task should be in position #3");
#line 28
 testRunner.And("the new task should be indented 2 places");
#line 29
 testRunner.And("the new task should be selected");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Starting a subtask should start the parent")]
        public virtual void StartingASubtaskShouldStartTheParent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Starting a subtask should start the parent", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table3.AddRow(new string[] {
                        "Do stuff"});
#line 32
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table3);
#line 35
 testRunner.And("that task #1 has a subtask \"Sub a\"");
#line 36
 testRunner.When("I drag task #2 to the \"In Progress\" column");
#line 37
 testRunner.Then("task #1 should be \"In Progress\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtasks are sorted with their parents")]
        public virtual void SubtasksAreSortedWithTheirParents()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtasks are sorted with their parents", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table4.AddRow(new string[] {
                        "One"});
            table4.AddRow(new string[] {
                        "Two"});
            table4.AddRow(new string[] {
                        "Three"});
#line 41
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table4);
#line 46
 testRunner.When("I set task \"Three\" to be more important than task \"One\"");
#line 47
 testRunner.And("I add a subtask \"Three-A\" to task \"Three\"");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table5.AddRow(new string[] {
                        "Three"});
            table5.AddRow(new string[] {
                        "Three-A"});
            table5.AddRow(new string[] {
                        "One"});
            table5.AddRow(new string[] {
                        "Two"});
#line 48
 testRunner.Then("the tasks should be in this order:", ((string)(null)), table5);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should not be able to set a subtask more important than its parent")]
        public virtual void ShouldNotBeAbleToSetASubtaskMoreImportantThanItsParent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should not be able to set a subtask more important than its parent", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table6.AddRow(new string[] {
                        "One"});
            table6.AddRow(new string[] {
                        "Two"});
            table6.AddRow(new string[] {
                        "Three"});
#line 56
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table6);
#line 61
 testRunner.When("I add a subtask \"One-A\" to task \"One\"");
#line 62
 testRunner.And("I set task \"One-A\" to be more important than task \"One\"");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table7.AddRow(new string[] {
                        "One"});
            table7.AddRow(new string[] {
                        "One-A"});
            table7.AddRow(new string[] {
                        "Two"});
            table7.AddRow(new string[] {
                        "Three"});
#line 63
 testRunner.Then("the tasks should be in this order:", ((string)(null)), table7);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should not be able to set a subtask more important than a task that is transitive" +
            "ly more important")]
        public virtual void ShouldNotBeAbleToSetASubtaskMoreImportantThanATaskThatIsTransitivelyMoreImportant()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should not be able to set a subtask more important than a task that is transitive" +
                    "ly more important", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table8.AddRow(new string[] {
                        "One"});
            table8.AddRow(new string[] {
                        "Two"});
            table8.AddRow(new string[] {
                        "Three"});
#line 71
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table8);
#line 76
 testRunner.When("I set task \"Three\" to be more important than task \"Two\"");
#line 77
 testRunner.And("I set task \"Two\" to be more important than task \"One\"");
#line 78
 testRunner.And("I set task \"One\" to be more important than task \"Three\"");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table9.AddRow(new string[] {
                        "Three"});
            table9.AddRow(new string[] {
                        "Two"});
            table9.AddRow(new string[] {
                        "One"});
#line 79
 testRunner.Then("the tasks should be in this order:", ((string)(null)), table9);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
