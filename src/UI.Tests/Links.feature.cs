// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.0.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.431
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Rogue.Ptb.UI.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Links")]
    public partial class LinksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Links.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Links", "In order to relate various tasks\nAs a user\nI want to link tasks together", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting relative priority")]
        public virtual void SettingRelativePriority()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting relative priority", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table1.AddRow(new string[] {
                        "One"});
            table1.AddRow(new string[] {
                        "Two"});
            table1.AddRow(new string[] {
                        "Three"});
#line 7
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table1);
#line 12
 testRunner.When("I set task \"Three\" to be more important than task \"One\"");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table2.AddRow(new string[] {
                        "Three"});
            table2.AddRow(new string[] {
                        "One"});
            table2.AddRow(new string[] {
                        "Two"});
#line 13
 testRunner.Then("the tasks should be in this order:", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Relative priority is persisted")]
        public virtual void RelativePriorityIsPersisted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Relative priority is persisted", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table3.AddRow(new string[] {
                        "One"});
            table3.AddRow(new string[] {
                        "Two"});
            table3.AddRow(new string[] {
                        "Three"});
#line 20
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table3);
#line 25
 testRunner.When("I set task \"Three\" to be more important than task \"One\"");
#line 26
 testRunner.And("I reload the taskboard");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table4.AddRow(new string[] {
                        "Three"});
            table4.AddRow(new string[] {
                        "One"});
            table4.AddRow(new string[] {
                        "Two"});
#line 27
 testRunner.Then("the tasks should be in this order:", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One task should not be both more and less important than another")]
        public virtual void OneTaskShouldNotBeBothMoreAndLessImportantThanAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One task should not be both more and less important than another", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table5.AddRow(new string[] {
                        "One"});
            table5.AddRow(new string[] {
                        "Two"});
            table5.AddRow(new string[] {
                        "Three"});
#line 34
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table5);
#line 39
 testRunner.When("I set task \"Three\" to be more important than task \"One\"");
#line 40
 testRunner.And("I set task \"One\" to be more important than task \"Three\"");
#line 41
 testRunner.Then("task \"One\" should be more important than task \"Three\"");
#line 42
 testRunner.And("task \"Three\" should not be more important than task \"One\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Importance is reflexive")]
        public virtual void ImportanceIsReflexive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Importance is reflexive", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table6.AddRow(new string[] {
                        "One"});
            table6.AddRow(new string[] {
                        "Two"});
            table6.AddRow(new string[] {
                        "Three"});
#line 46
 testRunner.Given("that the following tasks already exist and are loaded:", ((string)(null)), table6);
#line 51
 testRunner.When("I set task \"Three\" to be more important than task \"One\"");
#line 52
 testRunner.Then("task \"Three\" should be more important than task \"One\"");
#line 53
 testRunner.And("task \"One\" should be less important than task \"Three\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
