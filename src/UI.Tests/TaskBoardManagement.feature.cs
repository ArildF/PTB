// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Rogue.Ptb.UI.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create taskboard")]
    public partial class CreateTaskboardFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TaskBoardManagement.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create taskboard", "In order to organize my tasks\r\nAs an enterprising person\r\nI want to create and op" +
                    "en taskboards", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new taskboard")]
        public virtual void CreateNewTaskboard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new taskboard", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("that I enter \"C:\\foo\\bar.taskboard\" in the create taskboard dialog");
#line 8
    testRunner.When("I create a new taskboard");
#line 9
    testRunner.Then("a new taskboard database should be created in \"C:\\foo\\bar.taskboard\"");
#line 10
    testRunner.And("a new taskboard should be loaded");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Open existing taskboard")]
        public virtual void OpenExistingTaskboard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Open existing taskboard", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("that the database \"C:\\foo\\bar.taskboard\" already exists");
#line 14
    testRunner.And("that I enter \"C:\\foo\\bar.taskboard\" in the open taskboard dialog");
#line 15
    testRunner.When("I open a taskboard");
#line 16
    testRunner.Then("a taskboard should be loaded from \"C:\\foo\\bar.taskboard\"");
#line 17
    testRunner.And("a new taskboard should be loaded");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remember the last opened taskboards")]
        public virtual void RememberTheLastOpenedTaskboards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remember the last opened taskboards", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path"});
            table1.AddRow(new string[] {
                        "C:\\bar\\foo.taskboard"});
            table1.AddRow(new string[] {
                        "C:\\foo\\bar.taskboard"});
            table1.AddRow(new string[] {
                        "C:\\barbar\\foofoo.taskboard"});
#line 20
 testRunner.Given("that the following taskboards already exist:", ((string)(null)), table1);
#line 25
    testRunner.And("that I open \"C:\\foo\\bar.taskboard\"");
#line 26
    testRunner.And("that I open \"C:\\bar\\foo.taskboard\"");
#line 27
    testRunner.And("that I open \"C:\\barbar\\foofoo.taskboard\"");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Path"});
            table2.AddRow(new string[] {
                        "C:\\bar\\foo.taskboard"});
            table2.AddRow(new string[] {
                        "C:\\foo\\bar.taskboard"});
#line 28
    testRunner.Then("the dropdown for the open button should display these in this order:", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No remembered open taskboards")]
        public virtual void NoRememberedOpenTaskboards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No remembered open taskboards", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
    testRunner.Then("the dropdown for the open button should contain no items");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
